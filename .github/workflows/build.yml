name: Build Fortune Cookie App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: fortune-cookie-windows
            executable_name: DailyFortuneCookie.exe
            build_type: executable
          - os: macos-latest  
            artifact_name: fortune-cookie-macos
            executable_name: DailyFortuneCookie
            build_type: executable
          - os: macos-latest
            artifact_name: fortune-cookie-macos-app
            executable_name: DailyFortuneCookie.app
            build_type: app

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test imports
      run: |
        python -c "import tkinter; print('tkinter OK')"
        python -c "import gui; import fortune_data; print('All modules OK')"

    - name: Verify required files exist
      run: python -c "import os; assert os.path.exists('fortunes.json'), 'fortunes.json missing'; assert os.path.exists('main.py'), 'main.py missing'; print('All files OK')"

    - name: Build executable
      if: matrix.build_type == 'executable'
      run: |
        pyinstaller --onefile --windowed --name "DailyFortuneCookie" --add-data "fortunes.json${{ runner.os == 'Windows' && ';' || ':' }}." --distpath dist --hidden-import tkinter --hidden-import tkinter.ttk --hidden-import tkinter.messagebox main.py

    - name: Build macOS app bundle
      if: matrix.build_type == 'app'
      run: |
        pyinstaller --onedir --windowed --name "DailyFortuneCookie" --add-data "fortunes.json:." --distpath dist --hidden-import tkinter --hidden-import tkinter.ttk --hidden-import tkinter.messagebox main.py

    - name: Fallback console build if needed
      if: failure() && matrix.build_type == 'executable'
      run: |
        python -c "print('Windowed build failed, trying console mode...')"
        pyinstaller --onefile --console --name "DailyFortuneCookie" --add-data "fortunes.json${{ runner.os == 'Windows' && ';' || ':' }}." --distpath dist --hidden-import tkinter --hidden-import tkinter.ttk --hidden-import tkinter.messagebox main.py

    - name: Create README for app bundle
      if: matrix.build_type == 'app'
      run: |
        cat > dist/README.txt << 'EOF'
        # Daily Fortune App for macOS (.app bundle)
        
        ## How to Use:
        1. Drag DailyFortuneCookie.app to your Applications folder (optional)
        2. Double-click DailyFortuneCookie.app to start
        3. Click "Get Today's Fortune" 
        4. Come back tomorrow for a new fortune!
        
        ## Features:
        - One fortune per day
        - Tracks your streak  
        - Completely offline
        - No installation required
        - No console window (clean GUI experience)
        
        ## Installation:
        - Simply drag DailyFortuneCookie.app to Applications folder
        - Or run directly from any location
        
        ## Note:
        If you get a security warning on first launch:
        1. Right-click DailyFortuneCookie.app
        2. Select "Open"
        3. Click "Open" in the dialog
        
        This .app bundle provides the cleanest user experience with no console windows.
        
        Enjoy your daily inspiration!
        EOF
      shell: bash

    - name: Create README for executable
      if: matrix.build_type == 'executable'
      run: |
        cat > dist/README.txt << EOF
        # Daily Fortune App for ${{ runner.os }}
        
        ## How to Use:
        1. Double-click "${{ matrix.executable_name }}" to start
        2. Click "Get Today's Fortune" 
        3. Come back tomorrow for a new fortune!
        
        ## Features:
        - One fortune per day
        - Tracks your streak  
        - Completely offline
        - No installation required
        - Over 1000 inspiring messages
        
        ## System Requirements:
        - ${{ runner.os }} system
        - No installation required - just run the executable!
        
        ## Data Storage:
        Your fortune history is stored in your home directory
        
        ## Note:
        If you get a security warning on first launch, allow the application to run.
        
        Enjoy your daily inspiration!
        EOF
      shell: bash

    - name: List build results
      run: python -c "import os; print('Build contents:'); [print(f'  {f}') for f in os.listdir('dist') if os.path.isfile(os.path.join('dist', f))]"

    - name: Upload executable artifact
      if: matrix.build_type == 'executable'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/${{ matrix.executable_name }}
          dist/README.txt

    - name: Upload app bundle artifact
      if: matrix.build_type == 'app'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/${{ matrix.executable_name }}
          dist/README.txt

  create-release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: fortune-cookie-windows
        path: ./windows-release

    - name: Download macOS artifact  
      uses: actions/download-artifact@v4
      with:
        name: fortune-cookie-macos
        path: ./macos-release

    - name: Download macOS app bundle artifact
      uses: actions/download-artifact@v4
      with:
        name: fortune-cookie-macos-app
        path: ./macos-app-release

    - name: Create Windows ZIP
      run: |
        cd windows-release
        zip -r "../DailyFortune-Windows.zip" .

    - name: Create macOS ZIP
      run: |
        cd macos-release  
        zip -r "../DailyFortune-macOS.zip" .

    - name: Create macOS App Bundle ZIP
      run: |
        cd macos-app-release
        zip -r "../DailyFortune-macOS-App.zip" .

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          DailyFortune-Windows.zip
          DailyFortune-macOS.zip
          DailyFortune-macOS-App.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}