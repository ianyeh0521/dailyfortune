name: Build Fortune Cookie App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: fortune-cookie-windows
            executable_name: DailyFortuneCookie.exe
          - os: macos-latest  
            artifact_name: fortune-cookie-macos
            executable_name: DailyFortuneCookie

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -c "import tkinter; print('tkinter test passed')"
        python -c "import json, os, sys, random; print('Standard library imports OK')"
        
    - name: Install GUI dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
        
    - name: Install GUI dependencies (macOS)  
      if: matrix.os == 'macos-latest'
      run: |
        # tkinter should be included with Python on macOS
        python -c "import tkinter; print('tkinter available')"

    - name: Verify required files
      run: |
        ls -la
        echo "Checking for required files..."
        if [ ! -f "fortunes.json" ]; then
          echo "❌ fortunes.json not found"
          exit 1
        fi
        if [ ! -f "main.py" ]; then
          echo "❌ main.py not found"  
          exit 1
        fi
        echo "✅ All required files found"

    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Starting PyInstaller build for Windows..."
        python -c "import gui; import fortune_data; print('All modules imported successfully')"
        pyinstaller --distpath dist DailyFortune.spec --log-level INFO || {
          echo "Windowed build failed, trying with console mode..."
          pyinstaller --onefile --console --name "DailyFortuneCookie" --add-data "fortunes.json;." --distpath dist main.py --log-level INFO
        }
        echo "Build completed, listing dist directory:"
        ls -la dist/

    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "Starting PyInstaller build for macOS..."
        python -c "import gui; import fortune_data; print('All modules imported successfully')"
        pyinstaller --distpath dist DailyFortune.spec --log-level INFO || {
          echo "Windowed build failed, trying with console mode..."
          pyinstaller --onefile --console --name "DailyFortuneCookie" --add-data "fortunes.json:." --distpath dist main.py --log-level INFO
        }
        echo "Build completed, listing dist directory:"
        ls -la dist/

    - name: Create README for distribution
      run: |
        mkdir -p dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cat > dist/README.txt << 'EOF'
        # Daily Fortune Cookie - Windows Version

        ## How to Use
        1. Double-click "DailyFortuneCookie.exe" to start
        2. Click "Get Today's Fortune" to receive your daily fortune
        3. Come back tomorrow for a new fortune!

        ## System Requirements
        - Windows 10 or higher
        - No Python installation needed

        ## Notes
        - First run may show Windows security warning - click "Run anyway"
        - Your fortune history is stored in: C:\Users\[username]\.dailyfortune\

        Enjoy your daily dose of inspiration! 🥠
        EOF
        else
          cat > dist/README.txt << 'EOF'
        # Daily Fortune Cookie - macOS Version

        ## How to Use
        1. Double-click "DailyFortuneCookie" to start
        2. Click "Get Today's Fortune" to receive your daily fortune
        3. Come back tomorrow for a new fortune!

        ## System Requirements
        - macOS 10.14 (Mojave) or higher
        - No Python installation needed

        ## Notes
        - First run may need right-click → "Open" to bypass security check
        - Your fortune history is stored in: ~/.dailyfortune/

        Enjoy your daily dose of inspiration! 🥠
        EOF
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/${{ matrix.executable_name }}
          dist/README.txt

  create-release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: fortune-cookie-windows
        path: ./windows-release

    - name: Download macOS artifact  
      uses: actions/download-artifact@v4
      with:
        name: fortune-cookie-macos
        path: ./macos-release

    - name: Create Windows ZIP
      run: |
        cd windows-release
        zip -r "../DailyFortune-Windows.zip" .

    - name: Create macOS ZIP
      run: |
        cd macos-release  
        zip -r "../DailyFortune-macOS.zip" .

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          DailyFortune-Windows.zip
          DailyFortune-macOS.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}