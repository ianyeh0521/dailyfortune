name: Build Fortune Cookie App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact_name: fortune-cookie-windows
            executable_name: DailyFortuneCookie.exe
          - os: macos-latest  
            artifact_name: fortune-cookie-macos
            executable_name: DailyFortuneCookie

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test imports
      run: |
        python -c "import tkinter; print('tkinter OK')"
        python -c "import gui; import fortune_data; print('All modules OK')"

    - name: Verify required files exist
      run: python -c "import os; assert os.path.exists('fortunes.json'), 'fortunes.json missing'; assert os.path.exists('main.py'), 'main.py missing'; print('All files OK')"

    - name: Build with PyInstaller
      run: |
        pyinstaller --onefile --windowed --name "DailyFortuneCookie" --add-data "fortunes.json${{ runner.os == 'Windows' && ';' || ':' }}." --distpath dist --hidden-import tkinter --hidden-import tkinter.ttk --hidden-import tkinter.messagebox main.py

    - name: Fallback console build if needed
      if: failure()
      run: |
        python -c "print('Windowed build failed, trying console mode...')"
        pyinstaller --onefile --console --name "DailyFortuneCookie" --add-data "fortunes.json${{ runner.os == 'Windows' && ';' || ':' }}." --distpath dist --hidden-import tkinter --hidden-import tkinter.ttk --hidden-import tkinter.messagebox main.py

    - name: Create README
      run: python create_readme.py "${{ runner.os }}" "${{ matrix.executable_name }}"

    - name: List build results
      run: python -c "import os; print('Build contents:'); [print(f'  {f}') for f in os.listdir('dist') if os.path.isfile(os.path.join('dist', f))]"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          dist/${{ matrix.executable_name }}
          dist/README.txt

  create-release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: fortune-cookie-windows
        path: ./windows-release

    - name: Download macOS artifact  
      uses: actions/download-artifact@v4
      with:
        name: fortune-cookie-macos
        path: ./macos-release

    - name: Create Windows ZIP
      run: |
        cd windows-release
        zip -r "../DailyFortune-Windows.zip" .

    - name: Create macOS ZIP
      run: |
        cd macos-release  
        zip -r "../DailyFortune-macOS.zip" .

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          DailyFortune-Windows.zip
          DailyFortune-macOS.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}